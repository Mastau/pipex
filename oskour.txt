Perror (3) - #include <stdio.h>

call un message sur stderror

strerror(3) - string.h

returns a pointer to a string that describes the error code passed in the argument errnum


pipe(fd[2])
On success, zero is returned.  On error, -1 is returned


# ./pipex infile cmd1 cmd2 outfile
pipe()
 |
 |-- fork()
      |
      |-- child // cmd1
      :     |--dup2()
      :     |--close end[0]
      :     |--execve(cmd1)
      :
      |-- parent // cmd2
            |--dup2()
            |--close end[1]
            |--execve(cmd2)





// each cmd needs a stdin (input) and returns an output (to stdout)
   
    infile                                             outfile
as stdin for cmd1                                 as stdout for cmd2            
       |                        PIPE                        ↑
       |           |---------------------------|            |
       ↓             |                       |              |
      cmd1   -->    end[1]       ↔       end[0]   -->     cmd2           
                     |                       |
            cmd1   |---------------------------|  end[0]
           output                             reads end[1]
         is written                          and sends cmd1
          to end[1]                          output to cmd2
       (end[1] becomes                      (end[0] becomes 
        cmd1 stdout)                           cmd2 stdin)
        
        

TODO
GetPATH() //Taper dans le env pour regarder le PATH, split chaque path (usr/bin, usr/local/bin ect) 
//et tester chaque fonction > While access ko on continue

execcmd() //ft_split de l'arg de commande, getpath(cmd) > execve cmd

child_process () & parent_process() //open (filein/fileout) > dupe2 les fd > execcmd(arg)

**cmd au parsing execve(cmd[0], cmd, envp);
execve("/usr/bin/ls", ["/usr/bin/ls", "-l"], envp)
